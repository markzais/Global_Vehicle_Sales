gsub('ix20', 'iX20',
gsub('GTC4Lusso', 'GTC4 Lusso',
gsub('ChangAn', 'Changan',
gsub('Ram 1500', 'Ram 1500-4000',
gsub('Ram 2500', 'Ram 1500-4000',
gsub('Ram 2500/3500 Laramie', 'Ram 1500-4000',
gsub(' \\(est\\)', '',
gsub(' \\(Xcent\\)', '',
gsub('Geely Vision X6 \\(SUV\\)', 'Geely Vision X6', df$Model)))))))))))))))))))
# # Correct single typo or discrepancy in data
# df <- data.frame(lapply(df, function(x) {sub("E-star", "E-Star", x)}))
check <- df[str_detect(df$Model, "Ram Pickup'"), ]  # Extract matching rows with str_detect
View(unique_models)
View(unique_models)
View(check)
View(check)
View(df)
View(df)
check <- df[str_detect(df$Model, "Ram Pickup"), ]
View(check)
View(check)
check <- df[str_detect(df$Model, "Equinox"), ]  # Extract matching rows with str_detect
library(readr)
library (tidyverse)
library(dplyr)
library(writexl)
library(stringr)
check <- df[str_detect(df$Model, "Equinox"), ]  # Extract matching rows with str_detect
View(check)
View(check)
library(readr)
library (tidyverse)
library(dplyr)
library(writexl)
library(stringr)
path <- getwd()
filepath <- paste0(path,"/2021_Commercial_Vehicle_Data")
list_of_files <- list.files(filepath,
recursive = TRUE,
pattern = "\\.csv$",
full.names = TRUE)
# df <- readr::read_csv(list_of_files,  locale=locale(encoding="latin1"))
df <- readr::read_csv(list_of_files)
list_of_files <- list.files(filepath,
recursive = TRUE,
pattern = "\\.csv$",
full.names = TRUE)
# df <- readr::read_csv(list_of_files,  locale=locale(encoding="latin1"))
df <- readr::read_csv(list_of_files)
# Convert characters to numbers for Position 2020 column
df$Position_2020 <- as.numeric(df$Position_2020)
# Convert characters with "," and "%" to numbers
col_conv_commas <- c("Sales_2020")
col_conv_percents <- c("Percent_2021","Growth_2021","Percent_2020")
df[ , col_conv_commas] <- lapply(df[ , col_conv_commas],  # Convert data
function(x){ as.numeric(as.character(gsub(",", "", x))) })
df[ , col_conv_percents] <- lapply(df[ , col_conv_percents],  # Convert data
function(x){ as.numeric(as.character(gsub("%", "", x)))/100})
# Correct multiple typos and discrepancies in data
df$Model <- gsub("-Series", " Series",
gsub('E-star', 'E-Star',
gsub('Serie 1', '1 Series',
gsub('Serie 2', '2 Series',
gsub('Serie 4', '4 Series',
gsub('E-tron', 'e-tron',
gsub('e-Tron', 'e-tron',
gsub('IX', 'iX',
gsub('ix3', 'iX3',
gsub('ix5', 'iX5',
gsub('ix20', 'iX20',
gsub('GTC4Lusso', 'GTC4 Lusso',
gsub('Mercedes A-Class', 'Mercedes A Class',
gsub('Mercedes B-Class', 'Mercedes B Class',
gsub('Mercedes C-Class', 'Mercedes C Class',
gsub('Mercedes E-Class', 'Mercedes E Class',
gsub('Mercedes G-Class', 'Mercedes G Class',
gsub('Mercedes AMG G-Class', 'Mercedes G Class',
gsub('Mercedes S-Class', 'Mercedes S Class',
gsub('Mercedes V-Class.*', 'Mercedes V Class',
gsub('Mercedes X-Class', 'Mercedes X Class',
gsub('Mercedes E-Klasse.*', 'Mercedes E Class',
gsub('Mercedes C-Klasse.*', 'Mercedes C Class',
gsub('Mercedes A-Klasse', 'Mercedes A Class',
gsub('Mercedes B-Klasse', 'Mercedes B Class',
gsub('Mercedes G-Klasse', 'Mercedes G Class',
gsub('Mercedes S-Klasse', 'Mercedes S Class',
gsub('Mercedes Maybach S-Class', 'Mercedes S Class',
gsub('Mercedes V-Klasse.*', 'Mercedes V Class',
gsub('Mercedes E Class.*', 'Mercedes E Class',
gsub('Mercedes Classe A', 'Mercedes A Class',
gsub('Mercedes Classe B', 'Mercedes B Class',
gsub('Mercedes Classe C', 'Mercedes C Class', df$Model)))))))))))))))))))))))))))))))))
# Correct multiple typos and discrepancies in data
df$Model <-
gsub('ChangAn', 'Changan',
gsub('Ram 1500.*', 'Ram 1500-4000',
gsub('Ram 2500.*', 'Ram 1500-4000',
gsub('Ram Pickup', 'Ram 1500-4000',
gsub('Ram Pick-up', 'Ram 1500-4000',
gsub('Gmc Sierra', 'GMC Sierra',
gsub('Buick Excelle Yinlang', 'Buick Excelle',
gsub('Honda Vezel', 'Honda HR-V',
gsub("Toyota Land Cruiser.*", "Toyota Land Cruiser",
gsub("Audi A6.*", "Audi A6",
gsub("Chevrolet Malibu.*", "Chevrolet Malibu",
gsub("Chery Tiggo.*", "Chery Tiggo",
gsub("Changan CS75 Plus", "Changan CS75",
gsub("Toyota Hilux.*", "Toyota Hilux",
gsub("Toyota SW4 Fortuner", "Toyota Fortuner",
gsub("Nissan Pickup.*", "Nissan Navara",
gsub("Nissan Frontier.*", "Nissan Frontier",
gsub(' \\(est\\)', '',
gsub(' \\(Xcent\\)', '',
gsub('Geely Vision X6 \\(SUV\\)', 'Geely Vision X6', df$Model))))))))))))))))))))
check <- df[str_detect(df$Model, "Equinox"), ]
View(check)
View(check)
countries <- df[str_detect(df$Region, "Central Asia"), ]  # Extract matching rows with str_detect
View(countries)
View(countries)
countries <- df[str_detect(df$Region, "Asia"), ]  # Extract matching rows with str_detect
View(countries)
View(countries)
countries <- df[str_detect(df$Region, "East Asia"), ]  # Extract matching rows with str_detect
View(countries)
View(countries)
library(readr)
library (tidyverse)
library(dplyr)
library(writexl)
library(stringr)
path <- getwd()
filepath <- paste0(path,"/2021_Commercial_Vehicle_Data")
list_of_files <- list.files(filepath,
recursive = TRUE,
pattern = "\\.csv$",
full.names = TRUE)
# df <- readr::read_csv(list_of_files,  locale=locale(encoding="latin1"))
df <- readr::read_csv(list_of_files)
# Convert characters to numbers for Position 2020 column
df$Position_2020 <- as.numeric(df$Position_2020)
# Convert characters with "," and "%" to numbers
col_conv_commas <- c("Sales_2020")
col_conv_percents <- c("Percent_2021","Growth_2021","Percent_2020")
df[ , col_conv_commas] <- lapply(df[ , col_conv_commas],  # Convert data
function(x){ as.numeric(as.character(gsub(",", "", x))) })
df[ , col_conv_percents] <- lapply(df[ , col_conv_percents],  # Convert data
function(x){ as.numeric(as.character(gsub("%", "", x)))/100})
# Correct multiple typos and discrepancies in data
df$Model <- gsub("-Series", " Series",
gsub('E-star', 'E-Star',
gsub('Serie 1', '1 Series',
gsub('Serie 2', '2 Series',
gsub('Serie 4', '4 Series',
gsub('E-tron', 'e-tron',
gsub('e-Tron', 'e-tron',
gsub('IX', 'iX',
gsub('ix3', 'iX3',
gsub('ix5', 'iX5',
gsub('ix20', 'iX20',
gsub('GTC4Lusso', 'GTC4 Lusso',
gsub('Mercedes A-Class', 'Mercedes A Class',
gsub('Mercedes B-Class', 'Mercedes B Class',
gsub('Mercedes C-Class', 'Mercedes C Class',
gsub('Mercedes E-Class', 'Mercedes E Class',
gsub('Mercedes G-Class', 'Mercedes G Class',
gsub('Mercedes AMG G-Class', 'Mercedes G Class',
gsub('Mercedes S-Class', 'Mercedes S Class',
gsub('Mercedes V-Class.*', 'Mercedes V Class',
gsub('Mercedes X-Class', 'Mercedes X Class',
gsub('Mercedes E-Klasse.*', 'Mercedes E Class',
gsub('Mercedes C-Klasse.*', 'Mercedes C Class',
gsub('Mercedes A-Klasse', 'Mercedes A Class',
gsub('Mercedes B-Klasse', 'Mercedes B Class',
gsub('Mercedes G-Klasse', 'Mercedes G Class',
gsub('Mercedes S-Klasse', 'Mercedes S Class',
gsub('Mercedes Maybach S-Class', 'Mercedes S Class',
gsub('Mercedes V-Klasse.*', 'Mercedes V Class',
gsub('Mercedes E Class.*', 'Mercedes E Class',
gsub('Mercedes Classe A', 'Mercedes A Class',
gsub('Mercedes Classe B', 'Mercedes B Class',
gsub('Mercedes Classe C', 'Mercedes C Class', df$Model)))))))))))))))))))))))))))))))))
df$Model <-
gsub('ChangAn', 'Changan',
gsub('Ram 1500.*', 'Ram 1500-4000',
gsub('Ram 2500.*', 'Ram 1500-4000',
gsub('Ram Pickup', 'Ram 1500-4000',
gsub('Ram Pick-up', 'Ram 1500-4000',
gsub('Gmc Sierra', 'GMC Sierra',
gsub('Buick Excelle Yinlang', 'Buick Excelle',
gsub('Honda Vezel', 'Honda HR-V',
gsub("Toyota Land Cruiser.*", "Toyota Land Cruiser",
gsub("Audi A6.*", "Audi A6",
gsub("Chevrolet Malibu.*", "Chevrolet Malibu",
gsub("Chery Tiggo.*", "Chery Tiggo",
gsub("Changan CS75 Plus", "Changan CS75",
gsub("Toyota Hilux.*", "Toyota Hilux",
gsub("Toyota SW4 Fortuner", "Toyota Fortuner",
gsub("Nissan Pickup.*", "Nissan Navara",
gsub("Nissan Frontier.*", "Nissan Frontier",
gsub(' \\(est\\)', '',
gsub(' \\(Xcent\\)', '',
gsub('Geely Vision X6 \\(SUV\\)', 'Geely Vision X6', df$Model))))))))))))))))))))
# Read CSV file of vehicle types and drop "Sales"
vehicle_types = read.csv(paste0(filepath,"/Vehicle_Types/Vehicle_Types.csv"))
filepath
path
vehicle_types = read.csv(paste0(path,"/Vehicle_Types/Vehicle_Types.csv"))
vehicle_types = subset(vehicle_types, select = -Sales )
df_merge <- merge(df, vehicle_types, by = "Model",
all.x = TRUE)
View(df_merge)
View(df_merge)
output_path <- paste0(path,"/Output/")
write_xlsx(df_merge,paste0(output_path,"dataframe.xlsx"))
######################################################
# Create a table of the top 20 vehicle sales Worldwide
######################################################
# Aggregate Sales by  Model
agg_freq <- aggregate(df_merge$Sales_2021, by=list(Model = df_merge$Model, Type = df_merge$Type), FUN=sum)
agg_freq <- rename(agg_freq, Sales= x)
# Sort by Descending Sales
agg_freq <- arrange(agg_freq, desc(Sales))
# Calculate the percentage of Sales for each
agg_freq2 <- agg_freq%>%mutate(Percentage=paste0(round(Sales/sum(Sales)*100,2),"%"))
# Create a list of unique vehicles by Model
unique_models <- unique(agg_freq2[c("Model", "Sales")])
output_path <- paste0(path,"/Output/")
write_xlsx(unique_models,paste0(output_path,"Unique_Models.xlsx"))
#Keep the top 20 Vehicles
top20 <- agg_freq2 %>% # take the dataframe
slice(1:20) # and pick rows 1 to 20 per group
output_path <- paste0(path,"/Output/")
write_xlsx(top20,paste0(output_path,"Top20_Worldwide.xlsx"))
# Calculate the percentage of Sales for each
percent_type <- agg_freq %>% group_by(Type) %>% mutate(Percentage=paste0(round(Sales/sum(Sales)*100,2),"%"))
#Keep the top 20 Vehicles by Type
top20_worldwide_type <-percent_type %>% group_by(Type) %>% slice(1:20) # and pick rows 1 to 20 per group
output_path <- paste0(path,"/Output/")
write_xlsx(top20_worldwide_type,paste0(output_path,"Top20_Worldwide_Type.xlsx"))
agg_freq_command <- aggregate(df_merge$Sales_2021, by=list(Command = df_merge$Command, Model = df_merge$Model, Type = df_merge$Type), FUN=sum)
agg_freq_command <- rename(agg_freq_command, Sales= x)
# Sort by Continent and Descending Sales
agg_freq_command <- arrange(agg_freq_command, desc(Command), desc(Sales))
# Calculate the percentage of Sales for each by Continent
percent_command <- agg_freq_command%>%group_by(Command)%>%mutate(Percentage=paste0(round(Sales/sum(Sales)*100,2),"%"))
View(percent_command)
View(percent_command)
output_path <- paste0(path,"/Output/")
write_xlsx(percent_command,paste0(output_path,"Ranked_by_Command.xlsx"))
# Calculate the percentage of Sales for each by Continent & Type
percent_command_type <- agg_freq_command%>%group_by(Command,Type)%>%mutate(Percentage=paste0(round(Sales/sum(Sales)*100,2),"%"))
output_path <- paste0(path,"/Output/")
write_xlsx(percent_command_type,paste0(output_path,"Ranked_by_Command_Type.xlsx"))
#Keep the top 20 Countries by Continent
top20_command_type <- percent_command_type %>% # take the dataframe
group_by(Command, Type) %>% # group it by the grouping variable
slice(1:20) # and pick rows 1 to 20 per group
output_path <- paste0(path,"/Output/")
write_xlsx(top20_command_type,paste0(output_path,"Top20_by_Command_Type.xlsx"))
agg_freq_region <- aggregate(df_merge$Sales_2021, by=list(Region = df_merge$Region, Model = df_merge$Model, Type = df_merge$Type), FUN=sum)
agg_freq_region <- rename(agg_freq_region, Sales= x)
# Sort by Continent and Descending Sales
agg_freq_region <- arrange(agg_freq_region, desc(Region), desc(Sales))
# Calculate the percentage of Sales for each by Continent
percent_region <- agg_freq_region%>%group_by(Region)%>%mutate(Percentage=paste0(round(Sales/sum(Sales)*100,2),"%"))
output_path <- paste0(path,"/Output/")
write_xlsx(percent_region,paste0(output_path,"Ranked_by_Region.xlsx"))
#Keep the top 20 Countries by Region
top20_region <- percent_region %>% # take the dataframe
group_by(Region) %>% # group it by the grouping variable
slice(1:20) # and pick rows 1 to 20 per group
output_path <- paste0(path,"/Output/")
write_xlsx(top20_region,paste0(output_path,"Top20_by_Region.xlsx"))
# Calculate the percentage of Sales for each by Continent
percent_region_type <- agg_freq_region%>%group_by(Region, Type)%>%mutate(Percentage=paste0(round(Sales/sum(Sales)*100,2),"%"))
output_path <- paste0(path,"/Output/")
write_xlsx(percent_region_type,paste0(output_path,"Ranked_by_Region_Type.xlsx"))
View(df_merge)
View(df_merge)
View(df_merge)
View(df_merge)
unique_countries <- unique(df_merge[Country])
unique_countries <- unique(df_merge["Country"])
View(unique_countries)
View(unique_countries)
unique_countries <- unique(df_merge[c("Country", "Command", "Region")])
View(unique_countries)
View(unique_countries)
unique_countries <- unique(df_merge[c("Country", "Command", "Region")])
output_path <- paste0(path,"/Output/")
write_xlsx(unique_models,paste0(output_path,"Unique_Countries.xlsx"))
# Create a list of unique countries in the dataset
unique_countries <- unique(df_merge[c("Country", "Command", "Region")])
output_path <- paste0(path,"/Output/")
write_xlsx(unique_countries,paste0(output_path,"Unique_Countries.xlsx"))
library(readr)
library (tidyverse)
library(dplyr)
library(writexl)
library(stringr)
path <- getwd()
filepath <- paste0(path,"/2021_Commercial_Vehicle_Data")
list_of_files <- list.files(filepath,
recursive = TRUE,
pattern = "\\.csv$",
full.names = TRUE)
# df <- readr::read_csv(list_of_files,  locale=locale(encoding="latin1"))
df <- readr::read_csv(list_of_files)
# Convert characters to numbers for Position 2020 column
df$Position_2020 <- as.numeric(df$Position_2020)
# Convert characters with "," and "%" to numbers
col_conv_commas <- c("Sales_2020")
col_conv_percents <- c("Percent_2021","Growth_2021","Percent_2020")
df[ , col_conv_commas] <- lapply(df[ , col_conv_commas],  # Convert data
function(x){ as.numeric(as.character(gsub(",", "", x))) })
df[ , col_conv_percents] <- lapply(df[ , col_conv_percents],  # Convert data
function(x){ as.numeric(as.character(gsub("%", "", x)))/100})
# Correct multiple typos and discrepancies in data
df$Model <- gsub("-Series", " Series",
gsub('E-star', 'E-Star',
gsub('Serie 1', '1 Series',
gsub('Serie 2', '2 Series',
gsub('Serie 4', '4 Series',
gsub('E-tron', 'e-tron',
gsub('e-Tron', 'e-tron',
gsub('IX', 'iX',
gsub('ix3', 'iX3',
gsub('ix5', 'iX5',
gsub('ix20', 'iX20',
gsub('GTC4Lusso', 'GTC4 Lusso',
gsub('Mercedes A-Class', 'Mercedes A Class',
gsub('Mercedes B-Class', 'Mercedes B Class',
gsub('Mercedes C-Class', 'Mercedes C Class',
gsub('Mercedes E-Class', 'Mercedes E Class',
gsub('Mercedes G-Class', 'Mercedes G Class',
gsub('Mercedes AMG G-Class', 'Mercedes G Class',
gsub('Mercedes S-Class', 'Mercedes S Class',
gsub('Mercedes V-Class.*', 'Mercedes V Class',
gsub('Mercedes X-Class', 'Mercedes X Class',
gsub('Mercedes E-Klasse.*', 'Mercedes E Class',
gsub('Mercedes C-Klasse.*', 'Mercedes C Class',
gsub('Mercedes A-Klasse', 'Mercedes A Class',
gsub('Mercedes B-Klasse', 'Mercedes B Class',
gsub('Mercedes G-Klasse', 'Mercedes G Class',
gsub('Mercedes S-Klasse', 'Mercedes S Class',
gsub('Mercedes Maybach S-Class', 'Mercedes S Class',
gsub('Mercedes V-Klasse.*', 'Mercedes V Class',
gsub('Mercedes E Class.*', 'Mercedes E Class',
gsub('Mercedes Classe A', 'Mercedes A Class',
gsub('Mercedes Classe B', 'Mercedes B Class',
gsub('Mercedes Classe C', 'Mercedes C Class', df$Model)))))))))))))))))))))))))))))))))
# Correct multiple typos and discrepancies in data
df$Model <-
gsub('ChangAn', 'Changan',
gsub('Ram 1500.*', 'Ram 1500-4000',
gsub('Ram 2500.*', 'Ram 1500-4000',
gsub('Ford F-150', 'Ford F Series',
gsub('Ram Pickup', 'Ram 1500-4000',
gsub('Ram Pick-up', 'Ram 1500-4000',
gsub('Gmc Sierra', 'GMC Sierra',
gsub('Buick Excelle Yinlang', 'Buick Excelle',
gsub('Honda Vezel', 'Honda HR-V',
gsub("Toyota Land Cruiser.*", "Toyota Land Cruiser",
gsub("Audi A6.*", "Audi A6",
gsub("Chevrolet Malibu.*", "Chevrolet Malibu",
gsub("Chery Tiggo.*", "Chery Tiggo",
gsub("Changan CS75 Plus", "Changan CS75",
gsub("Toyota Hilux.*", "Toyota Hilux",
gsub("Toyota SW4 Fortuner", "Toyota Fortuner",
gsub("Nissan Pickup.*", "Nissan Navara",
gsub("Nissan Frontier.*", "Nissan Frontier",
gsub('Ford Transit/Tourneo.*', 'Ford Transit/Tourneo',
gsub('Toyota Yaris.*', 'Toyota Yaris',
gsub(' \\(est\\)', '',
gsub(' \\(Xcent\\)', '',
gsub('Geely Vision X6 \\(SUV\\)', 'Geely Vision X6', df$Model)))))))))))))))))))))))
# # Correct single typo or discrepancy in data
#df <- data.frame(lapply(df, function(x) {sub("E-star", "E-Star", x)}))
check <- df[str_detect(df$Model, "Honda"), ]  # Extract matching rows with str_detect
countries <- df[str_detect(df$Region, "East Asia"), ]  # Extract matching rows with str_detect
# Read CSV file of vehicle types and drop "Sales"
vehicle_types = read.csv(paste0(path,"/Vehicle_Types/Vehicle_Types.csv"))
vehicle_types = subset(vehicle_types, select = -Sales )
# Merge data frames by Model to add vehicle type
df_merge <- merge(df, vehicle_types, by = "Model",
all.x = TRUE)
#Export file to Excel
output_path <- paste0(path,"/Output/")
write_xlsx(df_merge,paste0(output_path,"dataframe.xlsx"))
######################################################
# Create a table of the top 20 vehicle sales Worldwide
######################################################
# Aggregate Sales by  Model
agg_freq <- aggregate(df_merge$Sales_2021, by=list(Model = df_merge$Model, Type = df_merge$Type), FUN=sum)
agg_freq <- rename(agg_freq, Sales= x)
# Sort by Descending Sales
agg_freq <- arrange(agg_freq, desc(Sales))
# Calculate the percentage of Sales for each
agg_freq2 <- agg_freq%>%mutate(Percentage=paste0(round(Sales/sum(Sales)*100,2),"%"))
# Create a list of unique vehicles by Model
unique_models <- unique(agg_freq2[c("Model", "Sales")])
output_path <- paste0(path,"/Output/")
write_xlsx(unique_models,paste0(output_path,"Unique_Models.xlsx"))
#Keep the top 20 Vehicles
top20 <- agg_freq2 %>% # take the dataframe
slice(1:20) # and pick rows 1 to 20 per group
output_path <- paste0(path,"/Output/")
write_xlsx(top20,paste0(output_path,"Top20_Worldwide.xlsx"))
# Calculate the percentage of Sales for each
percent_type <- agg_freq %>% group_by(Type) %>% mutate(Percentage=paste0(round(Sales/sum(Sales)*100,2),"%"))
#Keep the top 20 Vehicles by Type
top20_worldwide_type <-percent_type %>% group_by(Type) %>% slice(1:20) # and pick rows 1 to 20 per group
output_path <- paste0(path,"/Output/")
write_xlsx(top20_worldwide_type,paste0(output_path,"Top20_Worldwide_Type.xlsx"))
#########################################################
# Create a table of the top 20 vehicle sales by Continent
#########################################################
# Aggregate Sales by Continent and Model
agg_freq_continent <- aggregate(df_merge$Sales_2021, by=list(Continent = df_merge$Continent, Model = df_merge$Model, Type = df_merge$Type), FUN=sum)
agg_freq_continent <- rename(agg_freq_continent, Sales= x)
# Sort by Continent and Descending Sales
agg_freq_continent <- arrange(agg_freq_continent, desc(Continent), desc(Sales))
# Calculate the percentage of Sales for each by Continent
percent_continent <- agg_freq_continent%>%group_by(Continent)%>%mutate(Percentage=paste0(round(Sales/sum(Sales)*100,2),"%"))
#Keep the top 20 Countries by Continent
top20_cont <- percent_continent %>% # take the dataframe
group_by(Continent) %>% # group it by the grouping variable
slice(1:20) # and pick rows 1 to 20 per group
output_path <- paste0(path,"/Output/")
write_xlsx(top20_cont,paste0(output_path,"Top20_by_Continent.xlsx"))
########################################################
# Create a table of the top 20 vehicle sales by Continent & Type
#########################################################
# Calculate the percentage of Sales for each by Continent & Type
percent_continent_type <- agg_freq_continent%>%group_by(Continent,Type)%>%mutate(Percentage=paste0(round(Sales/sum(Sales)*100,2),"%"))
#Keep the top 20 Countries by Continent
top20_cont_type <- percent_continent_type %>% # take the dataframe
group_by(Continent, Type) %>% # group it by the grouping variable
slice(1:20) # and pick rows 1 to 20 per group
output_path <- paste0(path,"/Output/")
write_xlsx(top20_cont_type,paste0(output_path,"Top20_by_Continent_Type.xlsx"))
#########################################################
# Create a table of the top 20 vehicle sales by COCOM
#########################################################
# Aggregate Sales by Continent and Model
agg_freq_command <- aggregate(df_merge$Sales_2021, by=list(Command = df_merge$Command, Model = df_merge$Model, Type = df_merge$Type), FUN=sum)
agg_freq_command <- rename(agg_freq_command, Sales= x)
# Sort by Continent and Descending Sales
agg_freq_command <- arrange(agg_freq_command, desc(Command), desc(Sales))
# Calculate the percentage of Sales for each by Continent
percent_command <- agg_freq_command%>%group_by(Command)%>%mutate(Percentage=paste0(round(Sales/sum(Sales)*100,2),"%"))
output_path <- paste0(path,"/Output/")
write_xlsx(percent_command,paste0(output_path,"Ranked_by_Command.xlsx"))
#Keep the top 20 Countries by COCOM
top20_command <- percent_command %>% # take the dataframe
group_by(Command) %>% # group it by the grouping variable
slice(1:20) # and pick rows 1 to 20 per group
output_path <- paste0(path,"/Output/")
write_xlsx(top20_command,paste0(output_path,"Top20_by_Command.xlsx"))
########################################################
# Create a table of the top 20 vehicle sales by Command & Type
#########################################################
# Calculate the percentage of Sales for each by Continent & Type
percent_command_type <- agg_freq_command%>%group_by(Command,Type)%>%mutate(Percentage=paste0(round(Sales/sum(Sales)*100,2),"%"))
output_path <- paste0(path,"/Output/")
write_xlsx(percent_command_type,paste0(output_path,"Ranked_by_Command_Type.xlsx"))
#Keep the top 20 Countries by Continent
top20_command_type <- percent_command_type %>% # take the dataframe
group_by(Command, Type) %>% # group it by the grouping variable
slice(1:20) # and pick rows 1 to 20 per group
output_path <- paste0(path,"/Output/")
write_xlsx(top20_command_type,paste0(output_path,"Top20_by_Command_Type.xlsx"))
#########################################################
# Create a table of the top 20 vehicle sales by Region
#########################################################
# Aggregate Sales by Continent and Model
agg_freq_region <- aggregate(df_merge$Sales_2021, by=list(Region = df_merge$Region, Model = df_merge$Model, Type = df_merge$Type), FUN=sum)
agg_freq_region <- rename(agg_freq_region, Sales= x)
# Sort by Continent and Descending Sales
agg_freq_region <- arrange(agg_freq_region, desc(Region), desc(Sales))
# Calculate the percentage of Sales for each by Continent
percent_region <- agg_freq_region%>%group_by(Region)%>%mutate(Percentage=paste0(round(Sales/sum(Sales)*100,2),"%"))
output_path <- paste0(path,"/Output/")
write_xlsx(percent_region,paste0(output_path,"Ranked_by_Region.xlsx"))
#Keep the top 20 Countries by Region
top20_region <- percent_region %>% # take the dataframe
group_by(Region) %>% # group it by the grouping variable
slice(1:20) # and pick rows 1 to 20 per group
output_path <- paste0(path,"/Output/")
write_xlsx(top20_region,paste0(output_path,"Top20_by_Region.xlsx"))
#########################################################
# Create a table of the top 20 vehicle sales by Region & Type
#########################################################
# Calculate the percentage of Sales for each by Continent
percent_region_type <- agg_freq_region%>%group_by(Region, Type)%>%mutate(Percentage=paste0(round(Sales/sum(Sales)*100,2),"%"))
output_path <- paste0(path,"/Output/")
write_xlsx(percent_region_type,paste0(output_path,"Ranked_by_Region_Type.xlsx"))
#Keep the top 20 Countries by Region
top20_region_type <- percent_region_type %>% # take the dataframe
group_by(Region, Type) %>% # group it by the grouping variable
slice(1:20) # and pick rows 1 to 20 per group
output_path <- paste0(path,"/Output/")
write_xlsx(top20_region_type,paste0(output_path,"Top20_by_Region_Type.xlsx"))
# Create a list of unique countries in the dataset
unique_countries <- unique(df_merge[c("Country", "Command", "Region")])
output_path <- paste0(path,"/Output/")
write_xlsx(unique_countries,paste0(output_path,"Unique_Countries.xlsx"))
# Create a list of unique countries in the dataset
unique_countries <- unique(df_merge[c("Country", "Command", "Region", "Continent")])
output_path <- paste0(path,"/Output/")
write_xlsx(unique_countries,paste0(output_path,"Unique_Countries.xlsx"))
